services:
  db:
    image: mysql:8.4.5
    container_name: wordpress_mysql_db
    volumes:
      - db_data:/var/lib/mysql # Persistent storage for database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE_FILE: /run/secrets/db_name
      MYSQL_USER_FILE: /run/secrets/db_user
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_AUTH_PLUGIN: caching_sha2_password
    secrets:
      - db_root_password
      - db_name
      - db_user
      - db_password
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$(cat /run/secrets/db_user)", "-p$$(cat /run/secrets/db_password)"]
      interval: 10s
      timeout: 5s
      retries: 5

  wordpress:
    image: wordpress:6.8.1-php8.4-fpm
    container_name: wordpress_app
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    volumes:
      - wordpress_files:/var/www/html # Persistent storage for WordPress files
      # You might want to mount your theme/plugin development folder here:
      # - ./wp-content/themes/my-theme:/var/www/html/wp-content/themes/my-theme
      # - ./wp-content/plugins/my-plugin:/var/www/html/wp-content/plugins/my-plugin
    restart: unless-stopped
    environment:
      WORDPRESS_DB_HOST: db:3306 # 'db' is the service name of our MySQL container
      WORDPRESS_DB_USER_FILE: /run/secrets/db_user
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password
      WORDPRESS_DB_NAME_FILE: /run/secrets/db_name
      WORDPRESS_TABLE_PREFIX: wp_
      # Optional: For development, enable debugging
      # WORDPRESS_DEBUG: 1
    secrets:
      - db_user
      - db_password
      - db_name
    networks:
      - app-network
    # A more robust healthcheck for WordPress/PHP-FPM would typically require
    # a custom script or endpoint within the WordPress container.
    # For now, its health is implicitly tied to the db and Nginx's ability to connect.

  nginx:
    image: nginx:1.28.0
    container_name: wordpress_nginx_server
    depends_on:
      - wordpress # Nginx depends on WordPress being started
    ports:
      - "80:80" # Map host port 80 to container port 80
      # - "443:443" # If you were to set up SSL
    volumes:
      - wordpress_files:/var/www/html # Share WordPress files with Nginx
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # Mount Nginx config (read-only)
      # If setting up SSL:
      # - ./nginx/ssl_certs:/etc/nginx/ssl_certs:ro
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      # Test if Nginx is serving pages. It tries to get "/", which should be index.php.
      # If PHP-FPM (wordpress service) is down and causes a 502, curl -f will fail.
      # The `nginx:latest` image includes curl.
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s # Give some time for WordPress and Nginx to initialize

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.2.2
    container_name: wordpress_phpmyadmin
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    restart: unless-stopped
    ports:
      - "8080:80" # Access phpMyAdmin on http://localhost:8080
    environment:
      PMA_HOST: db # 'db' is the service name of our MySQL container
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      UPLOAD_LIMIT: 1G # Optional: Set upload limit for SQL files
      # PMA_USER and PMA_PASSWORD can be set for arbitrary server, but not needed if connecting to 'db' with root
    secrets:
      - db_root_password # phpMyAdmin uses this to connect if no specific user/pass is given for its login form
    networks:
      - app-network

volumes:
  db_data: # Named volume for MySQL data
  wordpress_files: # Named volume for WordPress core, themes, and plugins

networks:
  app-network:
    driver: bridge

secrets:
  db_root_password:
    file: ./secrets/db_root_password.txt
  db_password:
    file: ./secrets/db_password.txt
  db_name:
    file: ./secrets/db_name.txt
  db_user:
    file: ./secrets/db_user.txt
